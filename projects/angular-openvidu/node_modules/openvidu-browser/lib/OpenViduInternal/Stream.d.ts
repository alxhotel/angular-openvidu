import { Connection } from './Connection';
import { SessionInternal } from './SessionInternal';
import { OpenViduInternal, Callback } from './OpenViduInternal';
export interface StreamOptions {
    id: string;
    connection: Connection;
    recvVideo: any;
    recvAudio: any;
    video: boolean;
    audio: boolean;
    data: boolean;
    mediaConstraints: any;
}
export interface VideoOptions {
    thumb: string;
    video: HTMLVideoElement;
}
export declare class Stream {
    private openVidu;
    private local;
    private room;
    connection: Connection;
    private ee;
    private wrStream;
    private wp;
    private id;
    private video;
    private videoElements;
    private elements;
    private speechEvent;
    private recvVideo;
    private recvAudio;
    private sendVideo;
    private sendAudio;
    private mediaConstraints;
    private showMyRemote;
    private localMirrored;
    private chanId;
    private dataChannel;
    private dataChannelOpened;
    private videoSrc;
    private parentId;
    isReady: boolean;
    accessIsAllowed: boolean;
    accessIsDenied: boolean;
    constructor(openVidu: OpenViduInternal, local: boolean, room: SessionInternal, options: StreamOptions);
    emitSrcEvent(wrstream: any): void;
    emitStreamReadyEvent(): void;
    getVideoSrc(): string;
    removeVideo(parentElement: string): any;
    removeVideo(parentElement: Element): any;
    removeVideo(): any;
    getVideoElement(): HTMLVideoElement;
    setVideoElement(video: HTMLVideoElement): void;
    getRecvVideo(): any;
    getRecvAudio(): any;
    subscribeToMyRemote(): void;
    displayMyRemote(): boolean;
    mirrorLocalStream(wr: any): void;
    isLocalMirrored(): boolean;
    getChannelName(): string;
    isDataChannelEnabled(): boolean;
    isDataChannelOpened(): boolean;
    onDataChannelOpen(event: any): void;
    onDataChannelClosed(event: any): void;
    sendData(data: any): void;
    getWrStream(): any;
    getWebRtcPeer(): any;
    addEventListener(eventName: string, listener: any): void;
    addOnceEventListener(eventName: string, listener: any): void;
    removeListener(eventName: any): void;
    showSpinner(spinnerParentId: string): void;
    hideSpinner(spinnerId?: string): void;
    playOnlyVideo(parentElement: any, thumbnailId: any): HTMLVideoElement;
    playThumbnail(thumbnailId: any): HTMLVideoElement;
    getIdInParticipant(): string;
    getParticipant(): Connection;
    getId(): string;
    getRTCPeerConnection(): any;
    requestCameraAccess(callback: Callback<Stream>): void;
    private requestCameraAccesAux(constraints, callback);
    private userMediaHasVideo(callback);
    publishVideoCallback(error: any, sdpOfferParam: any, wp: any): void;
    startVideoCallback(error: any, sdpOfferParam: any, wp: any): void;
    private initWebRtcPeer(sdpOfferCallback);
    publish(): void;
    subscribe(): void;
    processSdpAnswer(sdpAnswer: any): void;
    unpublish(): void;
    dispose(): void;
}
