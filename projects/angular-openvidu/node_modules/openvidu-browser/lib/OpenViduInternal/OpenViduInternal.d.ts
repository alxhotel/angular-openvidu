import { SessionInternal } from './SessionInternal';
import { Stream } from './Stream';
export declare type Callback<T> = (error?: any, openVidu?: T) => void;
export declare class OpenViduInternal {
    private wsUri;
    private session;
    private jsonRpcClient;
    private rpcParams;
    private callback;
    private camera;
    private remoteStreams;
    constructor();
    constructor(wsUri: string);
    checkNgrokUri(): void;
    initSession(sessionId: any): SessionInternal;
    initPublisherTagged(parentId: string, cameraOptions: any, callback?: any): Stream;
    cameraReady(camera: Stream, parentId: string): HTMLVideoElement;
    initPublisher(cameraOptions: any, callback: any): void;
    getLocalStream(): Stream;
    getRemoteStreams(): Stream[];
    getWsUri(): any;
    setWsUri(wsUri: string): void;
    getOpenViduServerURL(): string;
    getRoom(): SessionInternal;
    connect(callback: Callback<OpenViduInternal>): void;
    private initJsonRpcClient(wsUri);
    private customNotification(params);
    private connectCallback(error);
    private isRoomAvailable();
    private disconnectCallback();
    private reconnectingCallback();
    private reconnectedCallback();
    private onParticipantJoined(params);
    private onParticipantPublished(params);
    private onParticipantLeft(params);
    private onParticipantEvicted(params);
    private onNewMessage(params);
    private iceCandidateEvent(params);
    private onRoomClosed(params);
    private onMediaError(params);
    setRpcParams(params: any): void;
    sendRequest(method: any, params: any, callback?: any): void;
    close(forced: any): void;
    disconnectParticipant(stream: any): void;
    getCamera(options?: any): Stream;
    sendMessage(room: any, user: any, message: any): void;
    sendCustomRequest(params: any, callback: any): void;
    toggleLocalVideoTrack(activate: boolean): void;
    toggleLocalAudioTrack(activate: boolean): void;
    publishLocalVideoAudio(): void;
    unpublishLocalVideoAudio(): void;
    generateMediaConstraints(quality: string): {
        audio: boolean;
        video: {};
    };
}
