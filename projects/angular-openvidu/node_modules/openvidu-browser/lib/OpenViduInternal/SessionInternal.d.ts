import { Stream } from './Stream';
import { OpenViduInternal } from './OpenViduInternal';
import { Connection } from './Connection';
export interface SessionOptions {
    sessionId: string;
    participantId: string;
    metadata: string;
    subscribeToStreams?: boolean;
    updateSpeakerInterval?: number;
    thresholdSpeaker?: number;
}
export declare class SessionInternal {
    private openVidu;
    private sessionId;
    private id;
    private ee;
    private streams;
    private participants;
    private participantsSpeaking;
    private connected;
    localParticipant: Connection;
    private subscribeToStreams;
    private updateSpeakerInterval;
    thresholdSpeaker: number;
    private options;
    constructor(openVidu: OpenViduInternal, sessionId: string);
    connect(token: any, callback: any): void;
    publish(): void;
    configure(options: SessionOptions): void;
    getId(): string;
    getSessionId(): string;
    private activateUpdateMainSpeaker();
    getLocalParticipant(): Connection;
    addEventListener(eventName: any, listener: any): void;
    addOnceEventListener(eventName: any, listener: any): void;
    removeListener(eventName: any, listener: any): void;
    removeEvent(eventName: any): void;
    emitEvent(eventName: any, eventsArray: any): void;
    subscribe(stream: Stream): void;
    unsuscribe(stream: any): void;
    onParticipantPublished(options: any): void;
    onParticipantJoined(msg: any): void;
    onParticipantLeft(msg: any): void;
    onParticipantEvicted(msg: any): void;
    onNewMessage(msg: any): void;
    recvIceCandidate(msg: any): void;
    onRoomClosed(msg: any): void;
    onLostConnection(): void;
    onMediaError(params: any): void;
    leave(forced: any, jsonRpcClient: any): void;
    disconnect(stream: Stream): void;
    unpublish(stream: Stream): void;
    getStreams(): {};
    addParticipantSpeaking(participantId: any): void;
    removeParticipantSpeaking(participantId: any): void;
}
