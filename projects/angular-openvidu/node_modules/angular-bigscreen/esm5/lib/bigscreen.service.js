/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DocumentRef } from './document-ref';
import * as i0 from "@angular/core";
import * as i1 from "./document-ref";
/**
 * @record
 */
function FullscreenControls() { }
if (false) {
    /** @type {?} */
    FullscreenControls.prototype.requestFullscreen;
    /** @type {?} */
    FullscreenControls.prototype.exitFullscreen;
    /** @type {?} */
    FullscreenControls.prototype.fullscreenElement;
    /** @type {?} */
    FullscreenControls.prototype.fullscreenEnabled;
    /** @type {?} */
    FullscreenControls.prototype.fullscreenchange;
    /** @type {?} */
    FullscreenControls.prototype.fullscreenerror;
}
var BigScreenService = /** @class */ (function () {
    function BigScreenService(documentRef) {
        this.documentRef = documentRef;
        this.fnMap = [
            // Object keys
            [
                'requestFullscreen',
                'exitFullscreen',
                'fullscreenElement',
                'fullscreenEnabled',
                'fullscreenchange',
                'fullscreenerror'
            ],
            // New WebKit
            [
                'webkitRequestFullscreen',
                'webkitExitFullscreen',
                'webkitFullscreenElement',
                'webkitFullscreenEnabled',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            // Old WebKit (Safari 5.1)
            [
                'webkitRequestFullScreen',
                'webkitCancelFullScreen',
                'webkitCurrentFullScreenElement',
                'webkitCancelFullScreen',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            // Mozilla
            [
                'mozRequestFullScreen',
                'mozCancelFullScreen',
                'mozFullScreenElement',
                'mozFullScreenEnabled',
                'mozfullscreenchange',
                'mozfullscreenerror'
            ],
            // MS
            [
                'msRequestFullscreen',
                'msExitFullscreen',
                'msFullscreenElement',
                'msFullscreenEnabled',
                'MSFullscreenChange',
                'MSFullscreenError'
            ]
        ];
        this.keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;
        /** @type {?} */
        var ret = {};
        /** @type {?} */
        var val;
        for (var i = 0; i < this.fnMap.length; i++) {
            val = this.fnMap[i];
            if (val && val[1] in this.documentRef.nativeDocument) {
                for (i = 0; i < val.length; i++) {
                    // Map everything to the first list of keys
                    ret[this.fnMap[0][i].toString()] = val[i];
                }
                this.fn = ret;
            }
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    BigScreenService.prototype.request = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        /** @type {?} */
        var request = this.fn.requestFullscreen;
        elem = elem || this.documentRef.nativeDocument.documentElement;
        // Work around Safari 5.1 bug: reports support for
        // keyboard in fullscreen even though it doesn't.
        // Browser sniffing, since the alternative with
        // setTimeout is even worse.
        if (/5\.1[.\d]* Safari/.test(navigator.userAgent)) {
            elem[request]();
        }
        else {
            elem[request](this.keyboardAllowed ? ((/** @type {?} */ (Element))).ALLOW_KEYBOARD_INPUT : {});
        }
    };
    /**
     * @return {?}
     */
    BigScreenService.prototype.exit = /**
     * @return {?}
     */
    function () {
        this.documentRef.nativeDocument[this.fn.exitFullscreen]();
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    BigScreenService.prototype.toggle = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        if (this.isFullscreen()) {
            this.exit();
        }
        else {
            this.request(elem);
        }
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    BigScreenService.prototype.onChange = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        this.documentRef.nativeDocument.addEventListener(this.fn.fullscreenchange, callback, false);
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    BigScreenService.prototype.onError = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        this.documentRef.nativeDocument.addEventListener(this.fn.fullscreenerror, callback, false);
    };
    /**
     * @return {?}
     */
    BigScreenService.prototype.isFullscreen = /**
     * @return {?}
     */
    function () {
        return Boolean(this.documentRef.nativeDocument[this.fn.fullscreenElement]);
    };
    /**
     * @return {?}
     */
    BigScreenService.prototype.isEnabled = /**
     * @return {?}
     */
    function () {
        // Coerce to boolean in case of old WebKit
        return Boolean(this.documentRef.nativeDocument[this.fn.fullscreenEnabled]);
    };
    /**
     * @return {?}
     */
    BigScreenService.prototype.getElement = /**
     * @return {?}
     */
    function () {
        return this.documentRef.nativeDocument[this.fn.fullscreenElement];
    };
    BigScreenService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    BigScreenService.ctorParameters = function () { return [
        { type: DocumentRef }
    ]; };
    /** @nocollapse */ BigScreenService.ngInjectableDef = i0.defineInjectable({ factory: function BigScreenService_Factory() { return new BigScreenService(i0.inject(i1.DocumentRef)); }, token: BigScreenService, providedIn: "root" });
    return BigScreenService;
}());
export { BigScreenService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BigScreenService.prototype.fnMap;
    /**
     * @type {?}
     * @private
     */
    BigScreenService.prototype.fn;
    /**
     * @type {?}
     * @private
     */
    BigScreenService.prototype.keyboardAllowed;
    /**
     * @type {?}
     * @private
     */
    BigScreenService.prototype.documentRef;
}
//# sourceMappingURL=data:application/json;base64,